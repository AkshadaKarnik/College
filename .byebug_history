c
@current_user&.role
c
header
c
request.headers['Authorization']
header
c
current_user
@current_user
@current_user&.role
c
@current_user&.role
c
JWT.decode(token, SECRET_KEY)[0]
SECRET_KEY
token
c
current_user
''
c
c'
c
render UserSerializer.new(@users)
UserSerializer.new(@users)
n
exit
      type: 'Success'
      status: 200,
      message: ['User list fetched successfully'],
      data: ActiveModelSerializers::SerializableResource.new(@users, each_serializer: UserSerializer),
render json: {
   15:       type: 'Success'
   14:       status: 200,
   13:       message: ['User list fetched successfully'],
   12:       data: ActiveModelSerializers::SerializableResource.new(@users, each_serializer: UserSerializer),
render json: {
   15:       type: 'Success'
   14:       status: 200,
   13:       message: ['User list fetched successfully'],
   12:       data: ActiveModelSerializers::SerializableResource.new(@users, each_serializer: UserSerializer),
render json: {
   15:       type: 'Success'
   14:       status: 200,
   13:       message: ['User list fetched successfully'],
   12:       data: ActiveModelSerializers::SerializableResource.new(@users, each_serializer: UserSerializer),
render json: {
exit
data: ActiveModelSerializers::SerializableResource.new(@users, each_serializer: UserSerializer)
exit
status: :ok
render json: {token: token}, status: :ok
render json: {token: token}
token = jwt_encode(user_id: @user.id)
@user.id
params[:password]
@user = User.find_by_email(params[:email])
@user
User.find_by_email(params[:email])
params[:email]
exit 
 header = request.headers['Authorization']
request.headers['Authorization']
header
quit
User.find_by_email(params[:email])
exit
User.where(email: params[:email])
User.find_by_email(params[:email])
params[:email]
@user = User.find_by_email(params[:email])
exit
header 
Authorization
c
header = request.headers['Authorization']
c
decoded = JWT.decode(token, SECRET_KEY)[0]
token
c
header = request.headers['token']
token
exit
render json: @user, status: :created
@user
exit
user.all
User
 @user
@user.save
@user 
User.new(user_params)
user_params
exit
render json: @user, status: :created
 @user = User.new(user_params)
@user
user_params
exit
c
 current_user.role 
 current_user.role == 'admin'
c
 current_user
current_user.role == 'admin'
user_signed_in?
exit
 current_user.role
admin
exit
clear
User.find(current_user.id)
current_user.id
@student
exit
 User.find(current_user.id)
current_user
params[:id]
params
exit
c
url: session_path(resource_name))
exit
n
exit
c
c'
c
n
User.last
n
devise_parameter_sanitizer.permit(:sign_up, keys: [:name, :department_id, :email, :password, :password_confirmation])
params
c
